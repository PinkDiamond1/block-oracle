#+title: Transaction Monitoring

The Block Oracle must monitor the changes in the Epoch Subgraph state changes after each transactions it broadcasts.

+ Why? ::
  Transactions could contain malformed encoded messages and fail to achieve their purpose.

  In those cases, the Epoch Subgraph will instantiate a =DecodingError= for the invalid message instead of updating its global state to the ongoing epoch.

* Possible Outcomes
There are three possible outcomes for a recently broadcast-ed message:

** Mined
The transaction is mined into a block and is expected to be captured by the Epoch Subgraph.

Once the Oracle detects that the transaction was mined (according to  predefined criteria) it then transitions to watch for changes inthe Epoch Subgraph internal state.

*** Valid Message
The message payload is decoded successfully and updates the Epoch Subgraph global state according to expectations.

*** Invalid Message
The message payload fails to be decoded by the Epoch Subgraph and results in a new =DecodingError= instance for the ongoing epoch.

The recovery strategy for undecodable payloads produced by the Block Oracle is discussed in the beginning of this document.

** Lingering
The transaction lingers in the mempool for longer than expected.

The Block Oracle can acknowledge and react to this condition in two different ways:

*** Aware
Usually the Oracle will wait for the transaction to be confirmed for a predefined time.

**** Gas Spending Strategy system
If confirmation exceeds that limit, then the Oracle will compare the current market gas price with the one used in the recently broadcast-ed transaction.

If a significant difference is found, then the Oracle should ponder about preparing a new transaction with adjusted gas prices.

The Gas Spending Strategy system will be consulted on the outcome of this action, as it will ultimately manage transaction retries:
+ Should it wait (again) for the gas prices to drop?
  + If so, for how long?
+ How much should the gas price be increased for the next transaction broadcast?
+ How many attempts will it make, and for how much more will it increase the gas price?

*** Unaware
Since the Block Oracle application is stateless, it is possible that it loses track of monitored transactions.

+ How could that happen? ::
  Failures or roll-outs/deploys could kill the Block Oracle process
  while it is waiting for a transaction to be confirmed.

If so, it would not be aware of any pending transactions and the Gas Spending Strategy system would never be invoked.

Nonetheless, this case would not be a problem as the Block Oracle will perform a "situational awareness" check by:
1) querying the Epoch Subgraph for its latest recorded epoch, and
2) querying the Protocol Chain for its current epoch.

If the Epoch Subgraph synced with the ongoing epoch, then the Block Oracle can safely sleep until the next epoch.

Otherwise, the Block Oracle will promptly attempt to perform its routine and prepare a transaction with updated gas prices, entering its Transaction Monitoring phase as usual.
