type Oracle @entity {
  id: ID!
  address: Bytes!
}

type Epoch @entity {
  id: ID!
  epochBlocks: [EpochBlock!] @derivedFrom(field: "epoch")
}

type Network @entity {
  id: ID!
  name: String!
  epochBlocks: [EpochBlock!] @derivedFrom(field: "network")
  latestEpochBlock: EpochBlock!
}

type EpochBlock @entity {
  id: ID!
  epoch: Epoch!
  network: Network!
  blockHash: Bytes!
  oracle: Oracle!
  timestamp: BigInt!
  transactionHash: Bytes!
  epochBlockUpdates: [EpochBlockUpdate!] @derivedFrom(field: "epochBlock")
}

type EpochBlockUpdate @entity {
  id: ID!
  epochBlock: EpochBlock!
  epoch: Epoch!
  network: Network!
  blockHash: Bytes!
  oracle: Oracle!
  transactionHash: Bytes!
  timestamp: BigInt!
}

type InvalidUpdate @entity {
  id: ID!
  timestamp: BigInt!
  transactionHash: Bytes!
  caller: Bytes!
}

type RawUpdate @entity {
  id: ID!
  payload: String!
}
